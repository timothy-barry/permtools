// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// run_bc_perm_test
List run_bc_perm_test(IntegerVector x, NumericVector y, int h);
RcppExport SEXP _permtools_run_bc_perm_test(SEXP xSEXP, SEXP ySEXP, SEXP hSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< int >::type h(hSEXP);
    rcpp_result_gen = Rcpp::wrap(run_bc_perm_test(x, y, h));
    return rcpp_result_gen;
END_RCPP
}
// run_binom_mixture_perm_test
List run_binom_mixture_perm_test(IntegerVector x, NumericVector y, double alpha);
RcppExport SEXP _permtools_run_binom_mixture_perm_test(SEXP xSEXP, SEXP ySEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(run_binom_mixture_perm_test(x, y, alpha));
    return rcpp_result_gen;
END_RCPP
}
// run_bc_multiple_test
List run_bc_multiple_test(IntegerVector x, List Y, int h, double alpha);
RcppExport SEXP _permtools_run_bc_multiple_test(SEXP xSEXP, SEXP YSEXP, SEXP hSEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< List >::type Y(YSEXP);
    Rcpp::traits::input_parameter< int >::type h(hSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(run_bc_multiple_test(x, Y, h, alpha));
    return rcpp_result_gen;
END_RCPP
}
// timesTwo
NumericVector timesTwo(NumericVector x);
RcppExport SEXP _permtools_timesTwo(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(timesTwo(x));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_permtools_run_bc_perm_test", (DL_FUNC) &_permtools_run_bc_perm_test, 3},
    {"_permtools_run_binom_mixture_perm_test", (DL_FUNC) &_permtools_run_binom_mixture_perm_test, 3},
    {"_permtools_run_bc_multiple_test", (DL_FUNC) &_permtools_run_bc_multiple_test, 4},
    {"_permtools_timesTwo", (DL_FUNC) &_permtools_timesTwo, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_permtools(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
